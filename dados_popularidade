{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMEZmCpSE7m9i65Yr2VgKyv",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Carol-Medeiros/Popularidade-do-Forro/blob/main/dados_popularidade\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rKONpyh73nLq",
        "outputId": "12e29787-0840-44bf-87a8-a40890cdcbbe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting reportlab\n",
            "  Downloading reportlab-4.4.3-py3-none-any.whl.metadata (1.7 kB)\n",
            "Requirement already satisfied: pillow>=9.0.0 in /usr/local/lib/python3.11/dist-packages (from reportlab) (11.3.0)\n",
            "Requirement already satisfied: charset-normalizer in /usr/local/lib/python3.11/dist-packages (from reportlab) (3.4.2)\n",
            "Downloading reportlab-4.4.3-py3-none-any.whl (2.0 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.0/2.0 MB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: reportlab\n",
            "Successfully installed reportlab-4.4.3\n"
          ]
        }
      ],
      "source": [
        "!pip install reportlab\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "6BERSDsx4uTB",
        "outputId": "b4687e1c-8fbc-406e-99eb-239fcf21ff3f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-78584373-9c98-4017-a787-d622100f95ce\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-78584373-9c98-4017-a787-d622100f95ce\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving forro_spotify_dados.csv to forro_spotify_dados.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "print(os.listdir())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QrYYIwD_5MT1",
        "outputId": "cc0f93c7-9c16-4daa-f317-eab6d4e10d6e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['.config', 'forro_spotify_dados.csv', 'sample_data']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('forro_spotify_dados.csv')\n"
      ],
      "metadata": {
        "id": "aMtkpW9t5R3x"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from reportlab.lib.pagesizes import letter\n",
        "from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak\n",
        "from reportlab.lib.styles import getSampleStyleSheet\n",
        "import io\n",
        "\n",
        "sns.set(style=\"whitegrid\", palette=\"Set2\")\n",
        "\n",
        "df = pd.read_csv('forro_spotify_dados.csv')\n",
        "\n",
        "pdf_path = \"relatorio_forro.pdf\"\n",
        "doc = SimpleDocTemplate(pdf_path, pagesize=letter)\n",
        "styles = getSampleStyleSheet()\n",
        "story = []\n",
        "\n",
        "def plot_to_image():\n",
        "    buf = io.BytesIO()\n",
        "    plt.savefig(buf, format='PNG', bbox_inches='tight')\n",
        "    plt.close()\n",
        "    buf.seek(0)\n",
        "    return Image(buf, width=450, height=300)\n",
        "\n",
        "# Pergunta 4\n",
        "story.append(Paragraph(\"Pergunta 4 - Padrões de Sucesso\", styles['Heading1']))\n",
        "\n",
        "limite_pop = df['Popularidade'].median()\n",
        "altas = df[df['Popularidade'] >= limite_pop]\n",
        "baixas = df[df['Popularidade'] < limite_pop]\n",
        "\n",
        "text = \"<b>Características das músicas mais populares:</b><br/>\"\n",
        "text += altas[['Popularidade', 'Duração']].describe().to_string().replace('\\n', '<br/>')\n",
        "story.append(Paragraph(text, styles['Normal']))\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "text = \"<b>Características das músicas menos populares:</b><br/>\"\n",
        "text += baixas[['Popularidade', 'Duração']].describe().to_string().replace('\\n', '<br/>')\n",
        "story.append(Paragraph(text, styles['Normal']))\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "df['Categoria_Pop'] = df['Popularidade'] >= limite_pop\n",
        "df['Categoria_Pop'] = df['Categoria_Pop'].map({True: 'Mais populares', False: 'Menos populares'})\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.boxplot(x='Categoria_Pop', y='Duração', data=df)\n",
        "plt.title(\"Duração - Mais vs Menos Populares\")\n",
        "plt.ylabel(\"Duração (min)\")\n",
        "plt.xlabel(\"\")\n",
        "story.append(plot_to_image())\n",
        "story.append(PageBreak())\n",
        "\n",
        "# Pergunta 5\n",
        "story.append(Paragraph(\"Pergunta 5 - Top 10 músicas e artistas\", styles['Heading1']))\n",
        "\n",
        "top_musicas = df.sort_values(by='Popularidade', ascending=False).head(10)\n",
        "top_artistas = df.groupby('Artista')['Popularidade'].mean().sort_values(ascending=False).head(10)\n",
        "\n",
        "text = \"<b>Top 10 músicas:</b><br/>\"\n",
        "text += top_musicas[['Artista', 'Música', 'Popularidade']].to_string(index=False).replace('\\n', '<br/>')\n",
        "story.append(Paragraph(text, styles['Normal']))\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "text = \"<b>Top 10 artistas (média de popularidade):</b><br/>\"\n",
        "text += top_artistas.to_string().replace('\\n', '<br/>')\n",
        "story.append(Paragraph(text, styles['Normal']))\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.barplot(x='Popularidade', y='Música', data=top_musicas, palette='viridis', order=top_musicas['Música'])\n",
        "plt.title(\"Top 10 músicas de Forró\")\n",
        "plt.xlabel(\"Popularidade\")\n",
        "plt.ylabel(\"Música\")\n",
        "plt.gca().invert_yaxis()\n",
        "story.append(plot_to_image())\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(x=top_artistas.values, y=top_artistas.index, palette='mako')\n",
        "plt.title(\"Top 10 artistas de Forró (Popularidade média)\")\n",
        "plt.xlabel(\"Popularidade Média\")\n",
        "plt.ylabel(\"Artista\")\n",
        "story.append(plot_to_image())\n",
        "story.append(PageBreak())\n",
        "\n",
        "# Pergunta 6\n",
        "story.append(Paragraph(\"Pergunta 6 - Novas vs Clássicas\", styles['Heading1']))\n",
        "\n",
        "media_por_periodo = df.groupby('Período')['Popularidade'].mean()\n",
        "\n",
        "text = \"<b>Popularidade média por período:</b><br/>\"\n",
        "text += media_por_periodo.to_string().replace('\\n', '<br/>')\n",
        "story.append(Paragraph(text, styles['Normal']))\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.barplot(x=media_por_periodo.index, y=media_por_periodo.values, palette='Set1')\n",
        "plt.title(\"Popularidade média por período\")\n",
        "plt.ylabel(\"Popularidade média\")\n",
        "plt.xlabel(\"Período\")\n",
        "story.append(plot_to_image())\n",
        "story.append(Spacer(1, 12))\n",
        "\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.boxplot(data=df, x='Período', y='Popularidade', hue='Subgênero')\n",
        "plt.title(\"Popularidade por período e subgênero\")\n",
        "plt.ylabel(\"Popularidade\")\n",
        "plt.xlabel(\"Período\")\n",
        "plt.legend(title=\"Subgênero\", bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "plt.tight_layout()\n",
        "story.append(plot_to_image())\n",
        "\n",
        "doc.build(story)\n",
        "\n",
        "print(\"PDF gerado com sucesso: relatorio_forro.pdf\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uj8RA63v5kHm",
        "outputId": "84a6c11c-b978-496e-a1a4-603c2129ba09"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1935806021.py:70: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x='Popularidade', y='Música', data=top_musicas, palette='viridis', order=top_musicas['Música'])\n",
            "/tmp/ipython-input-1935806021.py:79: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=top_artistas.values, y=top_artistas.index, palette='mako')\n",
            "/tmp/ipython-input-1935806021.py:97: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(x=media_por_periodo.index, y=media_por_periodo.values, palette='Set1')\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PDF gerado com sucesso: relatorio_forro.pdf\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "files.download('relatorio_forro.pdf')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "vsaLJ8o959AH",
        "outputId": "34f72a08-b933-40b9-ddcf-35db01e59d14"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_71597b75-78ca-464a-9953-2ec5c86ca4c8\", \"relatorio_forro.pdf\", 156689)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}